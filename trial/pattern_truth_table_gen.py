import itertools
from datetime import datetime

def patterns():
    today = datetime.now().strftime('%a %b %d %H:%M:%S %Y')
    name = 'truth_table.txt'
    pattern = 'adder.pat'
    print('Two input adder pattern and a Truth table generator:\n')
    # Number of input bits, user input
    bits = int(input("Enter the number of bits: "))

    Alist = []
    Blist = []

    for i in range(bits):
        Alist += [f'A({i})']
        Blist += [f'B({i})']
    A = Alist
    B = Blist
    bitlist = A + B
    n = len(bitlist)
    elements = ''
    for everyelement in bitlist:
        everyelement = ' ' + everyelement
        elements += everyelement
        inputs = f'in {everyelement} B;;;'
    
    with open(f'{name}_{bits}_bits_adder', 'w') as file:
        file.write(f'TRUTH TABLE\n{elements} Cin | sum Cout\n')
        with open(f'{pattern}_{bits}_bit', 'w') as file2:
            file2.write(f'-- Generated by maina_{datetime.now().year}\n\n'
                        f'--             date     :{today}\n'
                        '--              revision : v109\n\n'
                        f'--             sequence :{pattern}\n\n'
                        '-- input / output list:\n\n')
            for everyelement in bitlist:
                everyelement = ' ' + everyelement
                if bits ==1:
                	inputs = f'in  {everyelement.lower().strip('(')[1]} B;;;'
                else:
                	inputs = f'in  {everyelement.lower()} B;;;'
                file2.write(f'{inputs}\n')
            file2.write('in   cin  B;;;\nout  sum  B;;;\nout  cout B;;;\n\nbegin\n\n'
                        '-- pattern description :\n\n')
            file2.write(f'--            {elements} Cin  sum Cout\n\n')

            i = 0
            if bits == 1:
                duplicate_times = 2
            else:
                duplicate_times = 1
            for rep in range(duplicate_times):
            
                for combination in itertools.product([0, 1], repeat=(bits * 2 + 1)):
                    A_bits = combination[:bits]
                    B_bits = combination[bits:bits * 2]
                    Cin = combination[bits * 2]

                # Compute the sum
                    Sum = (sum(A_bits) + sum(B_bits) + Cin) % 2

                # Compute the carry-out (Cout)
                    intermediate_carry = 0
                    for j in range(bits):
                        carry_out = (A_bits[j] & B_bits[j]) | (A_bits[j] & intermediate_carry) | (B_bits[j] & intermediate_carry)
                        intermediate_carry = carry_out
                    Cout = (intermediate_carry | (Cin & (A_bits[0] | B_bits[0]))) if bits > 1 else (A_bits[0] & B_bits[0]) | (B_bits[0] & Cin) | (Cin & A_bits[0])

                    combination_str = '    '.join(map(str, combination))
                    file.write(f'   {combination_str}   |  {Sum}  {Cout}\n')

                    if i == 0:
                       i = ' ' + str(i)
                    file2.write(f'<  {i}ps>       : {combination_str}   ?{Sum}   ?{Cout} ;\n')
 
                    i = int(i)
                    i += 10
            file2.write('\n\nend;')
    
    print(f'\n\n\nTruth table generated successfully as {name}_{bits}_bits_adder\n\n')
    print(f'Pattern description generated successfully as {pattern}_{bits}_bit\n\n')
    print('please check the names the inputs, make sure they are similar to those in your VHDL file.\n\n')
    print('PLEASE RENAME your pattern file to file.pat before continuing with your synthesis.')
patterns()

